package JavaLar;

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class Utilidades {

	public static int retornarInstantes() {
		Scanner scanner = new Scanner(System.in);

		int opcao;

		do {
			opcao = scanner.nextInt();
			if (opcao == 0) {

				System.out.println("O número de instantes '0' não é permitido");
			} else if (opcao < 0) {
				System.out.println("Números menores do que '0' não são permitidos");
			}

		} while (opcao <= 0);

		return opcao;
	}

	public static int retornarOpcao() {
		Scanner scanner = new Scanner(System.in);

		int opcao = 0;

		do {

			opcao = scanner.nextInt();

			if (opcao <= 0 || opcao > 3) {

				System.out.println("Utilize apenas as opções permitidas: (1 ou 2 ou 3)!");
			}

		} while (opcao <= 0 || opcao > 3);

		return opcao;
	}

	public static void show(int[] python, int[] javascript, int[] ROR, int[] php, int[] csharp, int[] cplusplus,
			int[] c) {

		System.out.println("\n\n-//-//-//-  Posições dos Planetas Linguagens  -//-//-//-");
		System.out.println("A posição atual do Planeta Python é: (" + python[0] + " , " + python[1] + ")");
		System.out.println("A posição atual do Planeta JavaScript é (" + javascript[0] + " , " + javascript[1] + ")");
		System.out.println("A posição atual do Planeta Ruby On Rails é (" + ROR[0] + " , " + ROR[1] + ")");
		System.out.println("A posição atual do Planeta PHP é (" + php[0] + " , " + php[1] + ")");
		System.out.println("A posição atual do Planeta C# é (" + csharp[0] + " , " + csharp[1] + ")");
		System.out.println("A posição atual do Planeta C++ é (" + cplusplus[0] + " , " + cplusplus[1] + ")");
		System.out.println("A posição atual do Planeta C é (" + c[0] + " , " + c[1] + ")");
		System.out.println("-//-//-//-//-//-//-\n\n");

	}

	public static void comoFuncionaOSistema() {

	}

	public static void informacoes() {

	}

	public static void mover(Python p, JavaScript js, RubyOnRails ror, PHP php, CSharp cs, CPlusPlus cp, C c,
			int instantes) {

		p.mover(instantes);
		js.mover(instantes);
		ror.mover(instantes);
		php.mover(instantes);
		cs.mover(instantes);
		cp.mover(instantes);
		c.mover(instantes);

	}

	public static int retornarQuantidadeDeBugs(int espaco) {
		Scanner scanner = new Scanner(System.in);
		int quantidade = 0;

		do {

			quantidade = scanner.nextInt();

			if (quantidade > espaco) {

				System.out.print(
						"O limite máximo de bugs que você pode criar é " + espaco + " Por favor digite novamente: ");

			}

		} while (quantidade > espaco);

		return quantidade;
	}

	public static int retornarQuantidadeDeDevs(int espaco) {
		Scanner scanner = new Scanner(System.in);

		int quantidade = 0;

		do {

			quantidade = scanner.nextInt();

			if (quantidade > espaco) {

				System.out.print("O limite máximo de desenvolvedores que você pode criar é " + espaco
						+ " Por favor digite novamente: ");
			}

		} while (quantidade > espaco);

		return quantidade;
	}

	public static void criarBugs(int qntdBug, ArrayList<Bug> bugs, ArrayList<Desenvolvedor> devs) {
		Random random = new Random();
		boolean[][] posOcupadas = new boolean[15][15];
		int pX = 0;
		int pY = 0;
		

		for (int i = 0; i < qntdBug; i++) {

			do {
				pX = random.nextInt(15);
				pY = random.nextInt(15);
			} while (posOcupadas[pX][pY] == true);

			Bug bug = new Bug(pX, pY);
			bugs.add(bug);
			posOcupadas[pX][pY] = true;

		}

	}

	public static void criarDesenvolvedores(int qntddevs, ArrayList<Desenvolvedor> devs) {
		Random random = new Random();

		boolean[][] posOcupadas = new boolean[15][15];

		int pX = 0;
		int pY = 0;

		for (int i = 0; i < qntddevs; i++) {

			do {
				pX = random.nextInt(15);
				pY = random.nextInt(15);
			} while (posOcupadas[pX][pY] == true);

			Desenvolvedor desenvolvedor = new Desenvolvedor(pX, pY);
			devs.add(desenvolvedor);
			posOcupadas[pX][pY] = true;
		}

	}

	public static void showBugs(ArrayList<Bug> bug) {

		for (Bug bug2 : bug) {
			System.out.println("(" + bug2.getPX() + ", " + bug2.getPY() + ")");
		}

	}

	public static void verificarEncontrocomBugs(ArrayList<Planetas> planetas, ArrayList<Bug> bugs) {
		ArrayList<String> encontros = new ArrayList<>();

		for (Planetas planeta : planetas) {
			for (Bug bug : bugs) {
				if (planeta.getPosicaoX() == bug.getPX() && planeta.getPosicaoY() == bug.getPY()) {
					String mensagem = "Há uma colisão do planeta " + planeta.getNome() + " com um bug na posicão ("
							+ planeta.getPosicaoX() + ", " + planeta.getPosicaoY() + ")";
					if (!encontros.contains(mensagem)) {
						encontros.add(mensagem);
						System.out.println(mensagem);
					}

				}
			}
		}
	}

	public static void verificarEncontroComDesenvolvedores(ArrayList<Planetas> planetas,
			ArrayList<Desenvolvedor> desenvolvedor) {
		ArrayList<String> encontros = new ArrayList<>();

		for (Planetas planeta : planetas) {
			for (Desenvolvedor dev : desenvolvedor) {
				if (planeta.getPosicaoX() == dev.getPX() && planeta.getPosicaoY() == dev.getPY()) {
					String mensagem = "Há uma colisão do planeta " + planeta.getNome()
							+ " com um Desenvolvedor na posição (" + planeta.getPosicaoX() + ", "
							+ planeta.getPosicaoY() + ")";
					if (!encontros.contains(mensagem)) {
						encontros.add(mensagem);
						System.out.println(mensagem);
					}

				}

			}
		}

	}

}
